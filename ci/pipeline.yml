jobs:
  - name: set-self
    plan:
      - get: cg-ui
        trigger: true
      - set_pipeline: self
        file: cg-ui/ci/pipeline.yml

  - name: test-and-deploy-development
    plan:
      - in_parallel:
          - get: cg-ui-dev
            trigger: true
          - get: node
          - get: postgres

      - task: install-deps
        file: cg-ui/ci/partials/install.yml
        image: node

      - in_parallel:
          - task: lint-app
            file: cg-ui/ci/partials/lint.yml
            image: node

          - task: test-app
            privileged: true
            file: cg-ui/ci/partials/test.yml

      - put: create-db
        resource: cf-cli-dev
        params:
          command: create-service
          update_service: true
          # Note, the RDS broker doesn't return the correct status while provisioning:
          # https://github.com/18F/aws-broker/issues/59
          # If a new deployment, manually re-trigger the build once the RDS is up.
          wait_for_service: true
          timeout: 1200 # RDS take a long time to provision
          service_instance: cg-ui-datastore
          service: aws-rds
          plan: micro-psql

      - put: create-s3
        resource: cf-cli-dev
        params:
          command: create-service
          update_service: true
          service_instance: cg-ui-storage
          service: s3
          plan: basic

      - put: cloud-gov-development
        params:
          manifest: cg-ui/manifest.yml
          path: cg-ui
          vars:
            domain: dev.us-gov-west-1.aws-us-gov.cloud.gov
          environment_variables:
            CF_API_URL: ((dev-cf-api-url))/v3
            OAUTH_CLIENT_SECRET: ((dev-uaa-client-secret))
            ROOT_URL: ((dev-app-root-url))
            UAA_ROOT_URL: ((dev-uaa-root-url))

    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy cg-ui in development
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-ui'
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed cg-ui in development
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-ui'
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: test-and-deploy-staging
    plan:
      - in_parallel:
          - get: cg-ui
            passed: [set-self]
            trigger: true
          - get: node
          - get: postgres

      - task: install-deps
        file: cg-ui/ci/partials/install.yml
        image: node

      - in_parallel:
          - task: lint-app
            file: cg-ui/ci/partials/lint.yml
            image: node

          - task: test-app
            privileged: true
            file: cg-ui/ci/partials/test.yml

      - put: create-db
        resource: cf-cli-staging
        params:
          command: create-service
          update_service: true
          # Note, the RDS broker doesn't return the correct status while provisioning:
          # https://github.com/18F/aws-broker/issues/59
          # If a new deployment, manually re-trigger the build once the RDS is up.
          wait_for_service: true
          timeout: 1200 # RDS take a long time to provision
          service_instance: cg-ui-datastore
          service: aws-rds
          plan: micro-psql

      - put: create-s3
        resource: cf-cli-staging
        params:
          command: create-service
          update_service: true
          service_instance: cg-ui-storage
          service: s3
          plan: basic

      - put: cloud-gov-staging
        params:
          manifest: cg-ui/manifest.yml
          path: cg-ui
          vars:
            domain: fr-stage.cloud.gov
          environment_variables:
            CF_API_URL: ((staging-cf-api-url))/v3
            OAUTH_CLIENT_SECRET: ((staging-uaa-client-secret))
            ROOT_URL: ((staging-app-root-url))
            UAA_ROOT_URL: ((staging-uaa-root-url))

    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy cg-ui in staging
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-ui'
        username: ((slack-username))
        icon_url: ((slack-icon-url))
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed cg-ui in staging
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: '#cg-ui'
        username: ((slack-username))
        icon_url: ((slack-icon-url))

resources:
  - name: cg-ui-dev
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: git@github.com:cloud-gov/cg-ui.git
      branch: develop
      private_key: ((cg-ci-bot-sshkey.private_key))

  - name: cg-ui
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: git@github.com:cloud-gov/cg-ui.git
      branch: main
      private_key: ((cg-ci-bot-sshkey.private_key))

  - name: node
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: pages-node-v20
      aws_region: us-gov-west-1
      tag: latest

  - name: postgres
    type: registry-image
    source:
      repository: postgres
      tag: 16-alpine

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: cloud-gov-development
    type: cf
    source:
      api: ((dev-cf-api-url))
      username: ((dev-cf-username))
      password: ((dev-cf-password))
      organization: cloud-gov
      space: cg-ui
      skip_cert_check: false

  - name: cloud-gov-staging
    type: cf
    source:
      api: ((staging-cf-api-url))
      username: ((staging-cf-username))
      password: ((staging-cf-password))
      organization: cloud-gov
      space: cg-ui
      skip_cert_check: false

  - name: cf-cli-dev
    type: cf-cli-resource
    source:
      api: ((dev-cf-api-url))
      username: ((dev-cf-username))
      password: ((dev-cf-password))
      org: cloud-gov
      space: cg-ui

  - name: cf-cli-staging
    type: cf-cli-resource
    source:
      api: ((staging-cf-api-url))
      username: ((staging-cf-username))
      password: ((staging-cf-password))
      org: cloud-gov
      space: cg-ui

resource_types:
  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: cf
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: cf-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: cf-cli-resource
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: cf-cli-resource
      aws_region: us-gov-west-1
      tag: latest
